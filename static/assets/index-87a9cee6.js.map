{"version":3,"mappings":"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","names":["fetchAuthSetup","response","authSetup","useLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getToken","client","error","github","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","Link","Outlet","BACKEND_URI","getHeaders","idToken","headers","chatApi","request","getCitationFilePath","citation","RetrievalMode","getSourceInfomation","dataPoints","id","dataPoint","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","source","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","activeFileName","activeWebURL","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","switchIframeURLByFileType","pathWithoutLastSegment","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","TokenClaimsDisplay","ToString","a","items","key","columns","createTableColumn","b","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","setActiveFileName","setActiveWebURL","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","token","parsedResponse","e","clearChat","useEffect","onShouldStreamChange","checked","example","onShowCitation","file_name","web_url","onToggleTab","tab","streamedAnswer","hit_id","q","Fragment","SparkleFilled","Panel","Checkbox","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/assets/github.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { AuthenticationResult, IPublicClientApplication } from \"@azure/msal-browser\";\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string, // Client app id used for login\n            authority: string, // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\n            redirectUri: string, // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string, // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean // If \"true\", will navigate back to the original request location before processing the auth code response.\n        },\n        cache: {\n            cacheLocation: string, // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean // Set this to \"true\" if you are having issues on IE11 or Edge\n        }\n    },\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n         */\n        scopes: Array<string>\n    },\n    tokenRequest: {\n        scopes: Array<string>\n    }\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch('/auth_setup');\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri\n}\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\nexport const getToken = (client: IPublicClientApplication): Promise<AuthenticationResult | undefined> => {\n    return client.acquireTokenSilent({\n        ...tokenRequest,\n        redirectUri: getRedirectUri()\n    })\n    .catch((error) => {\n        console.log(error);\n        return undefined;\n    })\n}\n","export default \"__VITE_ASSET__4e6ad5ae__\"","import { DefaultButton } from '@fluentui/react';\nimport { useMsal } from '@azure/msal-react';\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest } from '../../authConfig';\n\n\nexport const LoginButton = () => {\n  const { instance } = useMsal();\n  const activeAccount = instance.getActiveAccount();\n  const handleLoginPopup = () => {\n      /**\n       * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n       * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n       * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n       */\n      instance\n          .loginPopup({\n              ...loginRequest,\n              redirectUri: getRedirectUri(),\n          })\n          .catch((error) => console.log(error));\n  };\n  const handleLogoutPopup = () => {\n    instance\n        .logoutPopup({\n            mainWindowRedirectUri: '/', // redirects the top level app after logout\n            account: instance.getActiveAccount(),\n        })\n        .catch((error) => console.log(error));\n  };\n  const logoutText = `Logout\\n${activeAccount?.username}`\n  return (\n      <DefaultButton\n        text={activeAccount ? logoutText : \"Login\"}\n        className={styles.loginButton}\n        onClick={activeAccount ? handleLogoutPopup : handleLoginPopup}>\n      </DefaultButton>\n  )\n};\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\"\n\nimport { LoginButton } from \"../../components/LoginButton\"\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>GPT + Graph Search 社内情報検索サンプル</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://github.com/07JP27/azureopenai-internal-microsoft-search\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    {useLogin && <LoginButton/>}\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest } from \"./models\";\nimport { useLogin } from \"../authConfig\";\n\nfunction getHeaders(idToken: string | undefined): Record<string, string> {\n    var headers : Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n    // If using login, add the id token of the logged in account as the authorization\n    if (useLogin) {\n        if (idToken) {\n            headers[\"Authorization\"] = `Bearer ${idToken}`\n        }\n    }\n\n    return headers;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\n    return await fetch(`${BACKEND_URI}/chat`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n}\n\nexport type ResponseContext = {\n    thoughts: string | null;\n    data_points: DataPoint[];\n}\n\nexport type DataPoint = {\n    id: string;\n    name: string;\n    web_url: string;\n    hit_id: string;\n}\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    choices: ResponseChoice[];\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n}\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    stream?: boolean;\n    session_state: any;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { DataPoint, getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n    followupQuestions: string[];\n};\n\n\n\n\nexport function getSourceInfomation(dataPoints: DataPoint[], id:string): DataPoint {\n    //dataPointsの配列からidが一致するものを探す\n    const dataPoint = dataPoints.find((dataPoint) => dataPoint.id === id);\n    return dataPoint ?? { id: \"\", name: \"\", web_url: \"\", hit_id: \"\" }; \n}\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (hit_id: string, web_url: string, file_name: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n    const followupQuestions: string[] = [];\n\n    // Extract any follow-up questions that might be in the answer\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\n        followupQuestions.push(content);\n        return \"\";\n    });\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    parsedAnswer = parsedAnswer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming){\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === ']') {\n                break;\n            } else if (parsedAnswer[i] === '[') {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    } \n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(String(citationIndex), path, part)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations,\n        followupQuestions\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml, getSourceInfomation } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (hit_id: string, web_url: string, file_name: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const messageContent = answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked ), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.choices[0].context.data_points?.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>引用:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const source = getSourceInfomation(answer.choices[0].context.data_points ,x);\n                            return (\n                                <span key={i} className={styles.citation} title={source.name} onClick={() => onCitationClicked(source.hit_id, source.web_url, source.name)}>\n                                    {`${++i}. ${source.name}`}\n                                </span>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {parsedAnswer.followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"就業規則とは何ですか？\",\n        value: \"就業規則とは何ですか？\"\n    },\n    { text: \"人事はどのような仕事をしますか？\", value: \"人事はどのような仕事をしますか？\" },\n    { text: \"休暇にはどんな種類がありますか？\", value: \"休暇にはどんな種類がありますか？\" }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","type ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = parts.slice(1).join(\": \");\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[];\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {supportingContent.map((x, i) => {\n                const parsed = parseSupportingContentItem(x);\n\n                return (\n                    <li className={styles.supportingContentItem}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    activeFileName: string | undefined;\n    activeWebURL: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, activeFileName, activeWebURL, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.choices[0].context.thoughts!);\n\n    const switchIframeURLByFileType = () => {\n        if (!activeFileName) {\n            return ''\n        }\n\n        const pathWithoutLastSegment = activeWebURL?.split('/').slice(0, -2).join('/');\n        \n        const fileExtension = activeFileName.split('.').pop()?.toLowerCase();\n        switch (fileExtension) {\n            case 'pptx':\n                return `https://m365x52168024.sharepoint.com/_layouts/15/Doc.aspx?sourcedoc={${activeCitation}}&action=embedview&wdAr=1.7777777777777777`;\n            case 'xlsx':\n                return `${pathWithoutLastSegment}/_layouts/15/Doc.aspx?sourcedoc={${activeCitation}}&action=embedview&wdAllowInteractivity=False&wdDownloadButton=True&wdInConfigurator=True&wdInConfigurator=True`\n            case 'docx':\n                return `${pathWithoutLastSegment}/_layouts/15/Doc.aspx?sourcedoc={${activeCitation}}&action=embedview`\n            case 'pdf':\n                return `${pathWithoutLastSegment}/_layouts/15/embed.aspx?UniqueId=${activeCitation}`\n            default:\n                // もう少し良い方法があるかも\n                return `${pathWithoutLastSegment}/_layouts/15/embed.aspx?UniqueId=${activeCitation}`\n        }\n    }\n    \n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.choices[0].context.data_points.map(dataPoint => dataPoint.toString())} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe \n                        src={switchIframeURLByFileType()}\n                        width=\"100%\" \n                        height=\"810px\"\n                    >\n                        This is an embedded\n                        <a target=\"_blank\" href=\"https://office.com\">\n                            Microsoft Office\n                        </a> \n                            powered by \n                        <a target=\"_blank\" href=\"https://office.com/webapps\">\n                            Office\n                        </a>\n                        .\n                    </iframe>\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"設定\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"チャットをクリア\"}\n            </Button>\n        </div>\n    );\n};\n","import { Label } from '@fluentui/react';\nimport { useMsal } from '@azure/msal-react';\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from '@fluentui/react-table';\n\ntype Claim = {\n    name: string;\n    value: string;\n}\n\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n\n    const ToString = (a: string | any) => {\n        if (typeof a === 'string') {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    const items: Claim[] = activeAccount?.idTokenClaims ?\n        Object.keys(activeAccount.idTokenClaims).map<Claim>(\n            (key: string) => { return { name: key, value: ToString((activeAccount.idTokenClaims ?? {})[key]) }; }) :\n        []\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: 'name',\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return 'Name';\n            },\n            renderCell: item => {\n                return item.name\n            },\n        }),\n        createTableColumn<Claim>({\n            columnId: 'value',\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return 'Value';\n            },\n            renderCell: item => {\n                return item.value\n            },\n        })\n    ]\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid\n                items={items}\n                columns={columns}\n                sortable\n                getRowId={item => item.name}\n            >\n                <DataGridHeader>\n                <DataGridRow>\n                    {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n                </DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                {({ item, rowId }) => (\n                    <DataGridRow<Claim> key={rowId}>\n                    {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n                    </DataGridRow>\n                )}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    )\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, RetrievalMode, ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, ResponseMessage } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(false);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeFileName, setActiveFileName] = useState<string>();\n    const [activeWebURL, setActiveWebURL] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = { ...askResponse,\n                        choices: [{ ...askResponse.choices[0],\n                                    message: { content: answer,\n                                        role: askResponse.choices[0].message.role\n                                    } }\n                                ]\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\n                    askResponse = event;\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = { ...askResponse,\n            choices: [{ ...askResponse.choices[0],\n                        message: { content: answer,\n                            role: askResponse.choices[0].message.role\n                        } }\n                    ]\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveFileName(undefined);\n        setActiveWebURL(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => ([\n                { content: a[0], role: \"user\" },\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\n            ]));\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                stream: shouldStream,\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\n            };\n\n            const response = await chatApi(request, token?.accessToken);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (response.status > 299 || !response.ok) {\n                    throw Error(parsedResponse.error || \"Unknown error\");\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveFileName(undefined);\n        setActiveWebURL(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, file_name: string, web_url: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveFileName(file_name);\n            setActiveWebURL(web_url)\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your M365 data</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={(hit_id, web_url, file_name) => onShowCitation(hit_id, web_url, file_name, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={(hit_id, web_url, file_name) => onShowCitation(hit_id, file_name, web_url, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"組織内向けChatGPTと会話を始めましょう。\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                        activeFileName={activeFileName}\n                        activeWebURL={activeWebURL}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from '@azure/msal-react';\nimport { PublicClientApplication, EventType, AccountInfo } from '@azure/msal-browser';\nimport { msalConfig, useLogin } from './authConfig';\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\nif (useLogin) {\n    var msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n    }\n\n    // Listen for sign-in event and set active account\n    msalInstance.addEventCallback((event) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n            const account = event.payload as AccountInfo;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n\n    layout = (\n        <MsalProvider instance={msalInstance}>\n            <Layout />\n        </MsalProvider>\n    )\n} else {\n    layout = <Layout />\n}\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-87a9cee6.js"}